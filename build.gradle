import java.util.regex.Pattern

buildscript {
    final Properties localProp = new Properties()
    def localPropFile = (new File(rootDir, "local.properties"))
    if (localPropFile.exists()) {
        localPropFile.withInputStream { localProp.load(it) }
    }
    def findPropertyOrEnvironment = { String key ->
        findProperty(key) ?: localProp.getProperty(key) ?: System.getenv(key)
    }

    // This file must be the text version (--armor)
    String signingFilename = findPropertyOrEnvironment("GPG_SIGNING_KEY_FILE")
    File signingFile = null
    if (signingFilename != null) {
        signingFile = file(signingFilename)
        if (!signingFile.exists()) {
            signingFile = new File(rootDir, signingFilename)
            if (!signingFile.exists()) {
                signingFile = null
            }
        }
    }

    ext.isAndroidEnabled = !(new File(rootDir, "disable-android.gradle")).exists()
    ext.deploy = [
            "central": [
                    "enabled" : findPropertyOrEnvironment("MVN_CENTRAL_USERNAME") != null,
                    "username": findPropertyOrEnvironment("MVN_CENTRAL_USERNAME"),
                    "password": findPropertyOrEnvironment("MVN_CENTRAL_PASSWORD"),
            ],
            "signing": [
                    "enabled" : signingFile != null && findPropertyOrEnvironment("GPG_SIGNING_KEY_ID") != null && findPropertyOrEnvironment("GPG_SIGNING_PASSWORD") != null,
                    "secret"  : signingFile?.getText("UTF-8"),
                    "key_id"  : findPropertyOrEnvironment("GPG_SIGNING_KEY_ID"),
                    "password": findPropertyOrEnvironment("GPG_SIGNING_PASSWORD"),
            ]
    ]
    ext.versions = [
            "java"  : JavaVersion.VERSION_1_8,
            "logger": [
                    "major": "0",
                    "minor": "1",
                    "pkg"  : "",
            ],
            android : [
                    "minimum": 21,
                    "compile": 30,
                    "target" : 30,
            ],
    ]
    ext.versions.logger.pkg = "${ext.versions.logger.major}.${ext.versions.logger.minor}."
    ext.lib = [
            "annotations": "org.jetbrains:annotations:20.1.0",
    ]
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        if (isAndroidEnabled) {
            classpath "com.android.tools.build:gradle:7.1.3"
        }
    }
    allprojects {
        repositories {
            mavenCentral()
            google()
        }
    }
}

plugins {
    id "java"
}

group "br.dev.dig.logger"
version "0.0.1"

java {
    sourceCompatibility = versions.java
    targetCompatibility = versions.java
}

dependencies {
    implementation project(":logger")
    implementation project(":filter")
    implementation project(":union")
    implementation project(":printer:println")
}

Pattern regex = Pattern.compile("'([a-zA-Z0-9\\-_:]+)'")

task deploy_ToLocal {
    group = "deploy local"
    allprojects { pj ->
        for (tsk in ["deployJavaToLocal", "deployAndroidToLocal"]) {
            if (pj.getTasksByName(tsk, false).isEmpty()) {
                continue
            }
            def match = regex.matcher(pj.displayName)
            match.find()
            def name = match.group()
            dependsOn "${name.substring(1, name.length() - 1)}:$tsk"
        }
    }
    doLast {
        println("")
        println("All projects were uploaded to local")
        println("-----------------------------------")
    }
}

task deploy_ToMavenCentral {
    group = "deploy central"
    allprojects { pj ->
        for (tsk in ["deployJavaToMavenCental", "deployAndroidToMavenCental"]) {
            if (pj.getTasksByName(tsk, false).isEmpty()) {
                continue
            }
            def match = regex.matcher(pj.displayName)
            match.find()
            def name = match.group()
            dependsOn "${name.substring(1, name.length() - 1)}:$tsk"
        }
    }
    doLast {
        println("===========================================")
        println("All projects were uploaded to Maven Central")
        println("===========================================")
    }
}